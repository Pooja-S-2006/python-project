import tkinter as tk
from tkinter import messagebox, ttk
from PIL import Image, ImageTk  # type: ignore
import random
from pathlib import Path

# Sample Data for Departments and Doctors
departments = {
    "Cardiology": ["Dr. JANISH JOB", "Dr. BARANI", "Dr. CHANDRU"],
    "Neurology": ["Dr. XAVIER", "Dr. YAZHINI", "Dr. ZARA"],
    "Orthopedics": ["Dr. MANJARI", "Dr. NANDINI", "Dr. OVIYA"],
    "Pediatrics": ["Dr. ROJA", "Dr. PRANITHA", "Dr. RAJA"],
    "General Medicine": ["Dr. POOJA", "Dr. KAVITA", "Dr. JAMES"],
}

# Sample Users (for login)
users = {
    "admin": "password"
}

# Store booked appointments
appointments = {
    "admin": []
}

class HospitalManagementApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Hospital Management System")
        self.root.geometry("1200x800")
        self.otp = None
        self.logged_in_user = None

        # Load Images for Home Page
        self.images = []
        for i in range(1, 5):
            image_path = Path(f"img{i}.jpg")
            if image_path.exists():
                img = Image.open(image_path).resize((300, 200), Image.LANCZOS)
                self.images.append(ImageTk.PhotoImage(img))
            else:
                placeholder = Image.new("RGB", (300, 200), (200, 200, 200))
                self.images.append(ImageTk.PhotoImage(placeholder))

        # Navbar
        self.navbar_frame = tk.Frame(self.root, bg="#003DA5")
        self.navbar_frame.pack(fill=tk.X)
        tk.Button(self.navbar_frame, text="Home", command=self.create_home_page, bg="#003DA5", fg="white", font=("Helvetica", 12), width=20).pack(side=tk.LEFT)
        tk.Button(self.navbar_frame, text="Book Appointment", command=self.create_booking_page, bg="#003DA5", fg="white", font=("Helvetica", 12), width=20).pack(side=tk.LEFT)
        tk.Button(self.navbar_frame, text="Login", command=self.create_login_page, bg="#003DA5", fg="white", font=("Helvetica", 12), width=20).pack(side=tk.LEFT)
        tk.Button(self.navbar_frame, text="Doctors", command=self.create_doctor_page, bg="#003DA5", fg="white", font=("Helvetica", 12), width=20).pack(side=tk.LEFT)

        # Content Frame
        self.content_frame = tk.Frame(self.root, bg="#f5f5f5")
        self.content_frame.pack(fill=tk.BOTH, expand=True)
        self.create_home_page()

    def clear_frame(self):
        """Clear the content frame."""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def create_home_page(self):
        """Create the Home Page."""
        self.clear_frame()
        tk.Label(self.content_frame, text="üè• Hospital Management System üè•", font=("Helvetica", 24, "bold"), bg="#003DA5", fg="white").pack(pady=20, fill=tk.X)
        tk.Label(self.content_frame, text="Our Services:", font=("Helvetica", 18), bg="#f5f5f5", fg="#333").pack(pady=10)
        
        # Display images
        image_frame = tk.Frame(self.content_frame, bg="#f5f5f5")
        image_frame.pack(pady=20)
        for index, image in enumerate(self.images):
            tk.Label(image_frame, image=image).grid(row=index // 2, column=index % 2, padx=10, pady=10)

    def create_booking_page(self):
        """Create the Booking Appointment Page."""
        self.clear_frame()
        tk.Label(self.content_frame, text="Book Appointment", font=("Helvetica", 24, "bold"), bg="#003DA5", fg="white").pack(pady=20, fill=tk.X)

        booking_frame = tk.Frame(self.content_frame, bg="#f5f5f5")
        booking_frame.pack(pady=20)

        tk.Label(booking_frame, text="Name", bg="#f5f5f5").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.name_entry = tk.Entry(booking_frame, width=30)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(booking_frame, text="Mobile Number", bg="#f5f5f5").grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.mobile_entry = tk.Entry(booking_frame, width=30)
        self.mobile_entry.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(booking_frame, text="Select Department", bg="#f5f5f5").grid(row=2, column=0, padx=10, pady=5, sticky="e")
        self.department_combobox = ttk.Combobox(booking_frame, values=list(departments.keys()), width=28)
        self.department_combobox.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(booking_frame, text="Enter OTP", bg="#f5f5f5").grid(row=3, column=0, padx=10, pady=5, sticky="e")
        self.otp_entry = tk.Entry(booking_frame, width=30)
        self.otp_entry.grid(row=3, column=1, padx=10, pady=5)

        tk.Button(booking_frame, text="Generate OTP", command=self.generate_otp, bg="#003DA5", fg="white").grid(row=4, column=0, pady=10)
        tk.Button(booking_frame, text="Book Now", command=self.verify_otp_and_book, bg="#003DA5", fg="white").grid(row=4, column=1, pady=10)

    def generate_otp(self):
        """Generate a random OTP."""
        self.otp = str(random.randint(1000, 9999))
        messagebox.showinfo("OTP Generated", f"Your OTP is: {self.otp}")

    def verify_otp_and_book(self):
        """Verify OTP and book an appointment."""
        if self.otp_entry.get() == self.otp:
            name = self.name_entry.get()
            mobile = self.mobile_entry.get()
            department = self.department_combobox.get()
            if name and mobile and department:
                # Store the appointment
                appointments[self.logged_in_user].append({"name": name, "mobile": mobile, "department": department})
                messagebox.showinfo("Success", f"Appointment booked in {department} department.")
                self.create_home_page()
            else:
                messagebox.showwarning("Incomplete Details", "Please fill all fields.")
        else:
            messagebox.showerror("Invalid OTP", "The OTP entered is incorrect.")

    def create_login_page(self):
        """Create the Login Page."""
        self.clear_frame()
        tk.Label(self.content_frame, text="Login", font=("Helvetica", 24, "bold"), bg="#003DA5", fg="white").pack(pady=20, fill=tk.X)

        login_frame = tk.Frame(self.content_frame, bg="#f5f5f5")
        login_frame.pack(pady=20)

        tk.Label(login_frame, text="Username", bg="#f5f5f5").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.username_entry = tk.Entry(login_frame, width=30)
        self.username_entry.grid(row=0, column=1)

        tk.Label(login_frame, text="Password", bg="#f5f5f5").grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.password_entry = tk.Entry(login_frame, width=30, show='*')
        self.password_entry.grid(row=1, column=1)

        tk.Button(login_frame, text="Login", command=self.login, bg="#003DA5", fg="white").grid(row=2, column=1, pady=10)

    def login(self):
        """Verify login credentials."""
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username in users and users[username] == password:
            messagebox.showinfo("Login Success", "Welcome!")
            self.logged_in_user = username
            self.create_logged_in_page()  # Display logged-in user page
        else:
            messagebox.showerror("Login Failed", "Invalid credentials.")

    def create_logged_in_page(self):
        """Display the user's details and booked appointments."""
        self.clear_frame()
        tk.Label(self.content_frame, text="Welcome to the System", font=("Helvetica", 24, "bold"), bg="#003DA5", fg="white").pack(pady=20, fill=tk.X)

        if self.logged_in_user:
            # Display booked appointments for the logged-in user
            tk.Label(self.content_frame, text="Your Booked Appointments", font=("Helvetica", 18), bg="#f5f5f5", fg="#333").pack(pady=10)
            booked_appointments = appointments[self.logged_in_user]
            if booked_appointments:
                for appointment in booked_appointments:
                    tk.Label(self.content_frame, text=f"{appointment['name']} - {appointment['department']} ({appointment['mobile']})", font=("Helvetica", 14)).pack(pady=5)
            else:
                tk.Label(self.content_frame, text="No appointments booked yet.", font=("Helvetica", 14), bg="#f5f5f5").pack(pady=10)

    def create_doctor_page(self):
        """Display list of doctors by department."""
        self.clear_frame()
        tk.Label(self.content_frame, text="Our Doctors", font=("Helvetica", 24, "bold"), bg="#003DA5", fg="white").pack(pady=20, fill=tk.X)

        for dept, docs in departments.items():
            tk.Label(self.content_frame, text=f"{dept}: {', '.join(docs)}", font=("Helvetica", 16)).pack(pady=10)

if _name_ == "_main_":
    root = tk.Tk()
    app = HospitalManagementApp(root)
    root.mainloop()